package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"

	"github.com/prometheus/client_golang/prometheus"
)

type VastCollector struct {
	apiKey       string
	metrics      map[string]*prometheus.Desc
	totalMachines *prometheus.Desc
}

type AutoGenerated struct {
	Summary struct {
		TotalGpu  float64 `json:"total_gpu"`
		TotalStor float64 `json:"total_stor"`
		TotalBwu  float64 `json:"total_bwu"`
		TotalBwd  float64 `json:"total_bwd"`
	} `json:"summary"`
	Current struct {
		Balance    float64 `json:"balance"`
		ServiceFee float64 `json:"service_fee"`
		Total      float64 `json:"total"`
		Credit     float64 `json:"credit"`
	} `json:"current"`
	PerMachine []struct {
		MachineID int     `json:"machine_id"`
		GpuEarn   float64 `json:"gpu_earn"`
		StoEarn   float64 `json:"sto_earn"`
		BwuEarn   float64 `json:"bwu_earn"`
		BwdEarn   float64 `json:"bwd_earn"`
	} `json:"per_machine"`
	PerDay []struct {
		Day     int     `json:"day"`
		GpuEarn float64 `json:"gpu_earn"`
		StoEarn float64 `json:"sto_earn"`
		BwuEarn float64 `json:"bwu_earn"`
		BwdEarn float64 `json:"bwd_earn"`
	} `json:"per_day"`
}

func NewVastCollector(apiKey string) *VastCollector {
	return &VastCollector{
		apiKey: apiKey,
		metrics: map[string]*prometheus.Desc{
			"earnings_current_balance": prometheus.NewDesc("vastai_earnings_current_balance", "Current balance of machine earnings", nil, nil),
			"earnings_total_gpu":       prometheus.NewDesc("vastai_earnings_total_gpu", "Total GPU earnings", nil, nil),
			"machines_total":          prometheus.NewDesc("vastai_machines_total", "Total number of machines", nil, nil),
			"total_gpu_summary":       prometheus.NewDesc("vastai_total_gpu_summary", "Total GPU summary", nil, nil),
			"total_stor_summary":      prometheus.NewDesc("vastai_total_stor_summary", "Total Stor summary", nil, nil),
			"total_bwu_summary":       prometheus.NewDesc("vastai_total_bwu_summary", "Total BWU summary", nil, nil),
			"total_bwd_summary":       prometheus.NewDesc("vastai_total_bwd_summary", "Total BWD summary", nil, nil),
			"current_balance":         prometheus.NewDesc("vastai_current_balance", "Current balance", nil, nil),
			"current_service_fee":     prometheus.NewDesc("vastai_current_service_fee", "Current service fee", nil, nil),
			"current_total":           prometheus.NewDesc("vastai_current_total", "Current total", nil, nil),
			"current_credit":          prometheus.NewDesc("vastai_current_credit", "Current credit", nil, nil),
			"per_machine_gpu_earn":    prometheus.NewDesc("vastai_per_machine_gpu_earn", "Per machine GPU earn", []string{"machine_id"}, nil),
			"per_machine_sto_earn":    prometheus.NewDesc("vastai_per_machine_sto_earn", "Per machine Sto earn", []string{"machine_id"}, nil),
			"per_machine_bwu_earn":    prometheus.NewDesc("vastai_per_machine_bwu_earn", "Per machine BWU earn", []string{"machine_id"}, nil),
			"per_machine_bwd_earn":    prometheus.NewDesc("vastai_per_machine_bwd_earn", "Per machine BWD earn", []string{"machine_id"}, nil),
			"per_day_gpu_earn":        prometheus.NewDesc("vastai_per_day_gpu_earn", "Per day GPU earn", []string{"day"}, nil),
			"per_day_sto_earn":        prometheus.NewDesc("vastai_per_day_sto_earn", "Per day Sto earn", []string{"day"}, nil),
			"per_day_bwu_earn":        prometheus.NewDesc("vastai_per_day_bwu_earn", "Per day BWU earn", []string{"day"}, nil),
			"per_day_bwd_earn":        prometheus.NewDesc("vastai_per_day_bwd_earn", "Per day BWD earn", []string{"day"}, nil),
		},
		totalMachines: prometheus.NewDesc("vastai_machines_total", "Total number of machines", nil, nil),
	}
}

func (c *VastCollector) Describe(ch chan<- *prometheus.Desc) {
	for _, metric := range c.metrics {
		ch <- metric
	}
	ch <- c.totalMachines
}

func (c *VastCollector) Collect(ch chan<- prometheus.Metric) {
	earningsURL := fmt.Sprintf("https://console.vast.ai/api/v0/users/me/machine-earnings?api_key=%s", c.apiKey)
	req, err := http.NewRequest("GET", earningsURL, nil)
	if err != nil {
		log.Fatalf("Failed to create request: %s", err)
		return
	}
	req.Header.Set("Accept", "application/json")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		log.Fatalf("Failed to make request: %s", err)
		return
	}
	defer resp.Body.Close()

	var earningsData AutoGenerated
	err = json.NewDecoder(resp.Body).Decode(&earningsData)
	if err != nil {
		log.Fatalf("Failed to decode JSON response: %s", err)
		return
	}

	ch <- prometheus.MustNewConstMetric(c.metrics["total_gpu_summary"], prometheus.GaugeValue, earningsData.Summary.TotalGpu)
	ch <- prometheus.MustNewConstMetric(c.metrics["total_stor_summary"], prometheus.GaugeValue, earningsData.Summary.TotalStor)
	ch <- prometheus.MustNewConstMetric(c.metrics["total_bwu_summary"], prometheus.GaugeValue, earningsData.Summary.TotalBwu)
	ch <- prometheus.MustNewConstMetric(c.metrics["total_bwd_summary"], prometheus.GaugeValue, earningsData.Summary.TotalBwd)
	ch <- prometheus.MustNewConstMetric(c.metrics["current_balance"], prometheus.GaugeValue, earningsData.Current.Balance)
	ch <- prometheus.MustNewConstMetric(c.metrics["current_service_fee"], prometheus.GaugeValue, earningsData.Current.ServiceFee)
	ch <- prometheus.MustNewConstMetric(c.metrics["current_total"], prometheus.GaugeValue, earningsData.Current.Total)
	ch <- prometheus.MustNewConstMetric(c.metrics["current_credit"], prometheus.GaugeValue, earningsData.Current.Credit)

	for _, machine := range earningsData.PerMachine {
		ch <- prometheus.MustNewConstMetric(c.metrics["per_machine_gpu_earn"], prometheus.GaugeValue, machine.GpuEarn, strconv.Itoa(machine.MachineID))
		ch <- prometheus.MustNewConstMetric(c.metrics["per_machine_sto_earn"], prometheus.GaugeValue, machine.StoEarn, strconv.Itoa(machine.MachineID))
		ch <- prometheus.MustNewConstMetric(c.metrics["per_machine_bwu_earn"], prometheus.GaugeValue, machine.BwuEarn, strconv.Itoa(machine.MachineID))
		ch <- prometheus.MustNewConstMetric(c.metrics["per_machine_bwd_earn"], prometheus.GaugeValue, machine.BwdEarn, strconv.Itoa(machine.MachineID))
	}

	for _, day := range earningsData.PerDay {
		ch <- prometheus.MustNewConstMetric(c.metrics["per_day_gpu_earn"], prometheus.GaugeValue, day.GpuEarn, strconv.Itoa(day.Day))
		ch <- prometheus.MustNewConstMetric(c.metrics["per_day_sto_earn"], prometheus.GaugeValue, day.StoEarn, strconv.Itoa(day.Day))
		ch <- prometheus.MustNewConstMetric(c.metrics["per_day_bwu_earn"], prometheus.GaugeValue, day.BwuEarn, strconv.Itoa(day.Day))
		ch <- prometheus.MustNewConstMetric(c.metrics["per_day_bwd_earn"], prometheus.GaugeValue, day.BwdEarn, strconv.Itoa(day.Day))
	}

	ch <- prometheus.MustNewConstMetric(c.totalMachines, prometheus.GaugeValue, float64(len(earningsData.PerMachine)))
}

